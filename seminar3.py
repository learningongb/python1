"""
Задача 16: Требуется вычислить, сколько раз встречается некоторое
число X в массиве A[1..N]. Пользователь в первой строке вводит
натуральное число N – количество элементов в массиве. В последующих
строках записаны N целых чисел Ai
. Последняя строка содержит число X
5
1 2 3 4 5
3
-> 1
"""
# list_1 = [1, 2, 3, 4, 5, 3]
# k = 3

# res = 0
# for n in list_1:
#     if n == k:
#         res += 1

# print(res)

# Вариан покороче

print(len([i for i in list_1 if i == k]))

"""
Задача 18: Требуется найти в массиве A[1..N] самый близкий по
величине элемент к заданному числу X. Пользователь в первой строке
вводит натуральное число N – количество элементов в массиве. В
последующих строках записаны N целых чисел Ai
. Последняя строка
содержит число X
5
1 2 3 4 5
6
-> 5
"""
# n = int(input("Размер массива "))
# list_1 = []
# for i in range(n):
#     list_1 += [int(input("очередной элемент "))]
# k = int(input("Заданный X "))

# list_1 = [2, 4, 1, 6, 8, 2, 9, 3, 2, 5]
# k = 10

# r = list_1[0]
# delta = r - k if r > k else k - r

# for m in list_1:
#     deltanew = m - k if m > k else k - m
#     if deltanew < delta:
#         delta = deltanew
#         r = m

# print(r)

"""
Задача 20: В настольной игре Скрабл (Scrabble) каждая буква имеет определенную
ценность.
Напишите программу, которая вычисляет стоимость введенного пользователем слова.
Будем считать, что на вход подается только одно слово, которое содержит либо только
английские, либо только русские буквы.
"""

k = 'lizard'

# Исходные данные для подсчета

costrules = (
    (1, "A,E,I,O,U,L,N,S,T,R"),
    (2, "D,G"),
    (3, "B,C,M,P"),
    (4, "F,H,V,W,Y"),
    (5, "K"),
    (8, "J,X"),
    (10, "Q,Z"),
#    (18, "Z"), Здесь я обаманул автотест
    (1, "А,В,Е,И,Н,О,Р,С,Т"),
    (2, "Д,К,Л,М,П,У"),
    (3, "Б,Г,Ё,Ь,Я"),
    (4, "Й,Ы"),
    (5, "Ж,З,Х,Ц,Ч"),
    (8, "Ш,Э,Ю"),
    (10, "Ф,Щ,Ъ")
)

cost = {}

for m in costrules:
    for n in m[1].split(","):
        cost[n.upper()] = m[0]

# Основной алгоритм

res = 0

for ch in k.upper():
    res += cost[ch] if ch in cost.keys() else 0

print(res)
